version: 2.1

orbs:
  # Replace this with your own!
  altostra-orb: altostra/altostra-orb@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@10.0

# Pipeline Parameters
## These parameters are used internally by orb-tools. Skip to the Jobs section.
parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:alpha" version must exist for the initial pipeline run.
    type: string
    default: "dev:alpha"

jobs:
  # Define one or more jobs which will utilize your orb's commands and parameters to validate your changes.
  integration-test-setup:
    executor: altostra-orb/default
    working_directory: ~/altostra-orb/resources/test_project
    steps:
      - checkout:
          path: ~/altostra-orb
      - altostra-orb/setup:
          api-token: "$ALTO_API_KEY"

  integration-test-deploy_no_name:
    executor: altostra-orb/default
    working_directory: ~/altostra-orb/resources/test_project
    steps:
      - checkout:
          path: ~/altostra-orb
      - altostra-orb/setup:
          api-token: "$ALTO_API_KEY"
      - altostra-orb/deploy:
          instance-name: "circleci"
          env-name: "Daylong"

  integration-test-deploy_with_name:
    executor: altostra-orb/default
    working_directory: ~/altostra-orb/resources/test_project
    environment:
      VERSION_NAME: $(openssl rand -base64 12)
    steps:
      - run:
          command: echo "$VERSION_NAME"
      - checkout:
          path: ~/altostra-orb
      - altostra-orb/setup:
          api-token: "$ALTO_API_KEY"
      - altostra-orb/deploy:
          instance-name: "circleci1"
          env-name: "Daylong"
          image-name: "$VERSION_NAME"

  integration-test-push_deploy:
    executor: altostra-orb/default
    working_directory: ~/altostra-orb/resources/test_project
    environment:
      VERSION_NAME: $(openssl rand -base64 12)
    steps:
      - run:
          command: echo "$VERSION_NAME"
      - checkout:
          path: ~/altostra-orb
      - altostra-orb/setup:
          api-token: "$ALTO_API_KEY"
      - altostra-orb/push:
          version: "$VERSION_NAME"
      - altostra-orb/deploy-version:
          instance-name: "circleci2"
          env-name: "Daylong"
          image-name: "$VERSION_NAME"


workflows:
  # Prior to producing a development orb (which requires credentials) basic validation, linting, and even unit testing can be performed.
  # This workflow will run on every commit
  test-pack:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint # Lint Yaml files
      - orb-tools/pack # Pack orb source
      # If you accept building open source forks, protect your secrects behind a restricted context.
      # A job containing restricted context (which holds your orb publishing credentials) may only be accessed by a user with proper permissions.
      # An open source user may begin a pipeline with a PR, and once the pipeline is approved by an authorized user at this point, the pipeline will continue with the proper context permissions.
      - hold-for-dev-publish:
          type: approval
          requires:
            - orb-tools/lint
            - orb-tools/pack
            - bats/run
            - shellcheck/check
      # Publish development version(s) of the orb.
      - orb-tools/publish-dev:
          orb-name: altostra/altostra-orb
          context: orb-publishing # A restricted context containing your private publishing credentials. Will only execute if approved by an authorized user.
          requires: [hold-for-dev-publish]
      # Trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev

  # This `integration-test_deploy` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-test_deploy:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      # Run any integration tests defined within the `jobs` key.
      - integration-test-setup
      - integration-test-deploy_no_name
      - integration-test-deploy_with_name
      - integration-test-push_deploy

      # Publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published.
      - orb-tools/dev-promote-prod-from-commit-subject:
          orb-name: altostra/altostra-orb
          context: orb-publishing
          add-pr-comment: false
          fail-if-semver-not-indicated: true
          publish-version-tag: false
          requires:
            - integration-test-setup
            - integration-test-deploy_no_name
            - integration-test-deploy_with_name
            - integration-test-push_deploy
          filters:
            branches:
              only:
                - master
                - main
